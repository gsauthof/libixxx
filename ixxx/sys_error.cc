// Copyright (c) 2018, Georg Sauthoff <mail@georg.so>

// SPDX-License-Identifier: BSD-2-Clause

#include "sys_error.hh"

#include <array>
#include <sstream>
#include <errno.h>
#include <string.h>

namespace ixxx {

    sys_error::sys_error(int code, const char* literal)
        : std::exception()
          , errno_(code)
          , literal_(literal)
    {

    }
    sys_error::sys_error(const char* literal)
        : std::exception()
          , errno_(0)
          , literal_(literal)
    {

    }
    sys_error::sys_error(const sys_error& o)
        : errno_(o.errno_)
          , literal_(o.literal_)
    {
    }
    sys_error& sys_error::operator=(const sys_error& o)
    {
        errno_ = o.errno_;
        literal_ = o.literal_;
        return *this;
    }
    const char* sys_error::what() const noexcept
    {
        if (!what_) {
            std::ostringstream o;
            o << name() << ": ";
            if (errno_) {
                std::array<char, 256> buffer;
                const char* errno_s = buffer.data();
                buffer[0] = 0;
                // g++ unconditionally defines _GNU_SOURCE
                // https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=485135
                // http://stackoverflow.com/questions/11670581/why-is-gnu-source-defined-by-default-and-how-to-turn-it-off
#ifdef _GNU_SOURCE
                // this API makes more sense as it avoids a copy in the good case
                errno_s = ::strerror_r(errno_, buffer.data(), buffer.size());
#else
#if defined(__MINGW32__) || defined(__MINGW64__)
                // cf. sec_api/string_s.h
                int r = strerror_s(buffer.data(), buffer.size(), errno_);
#else
                int r = ::strerror_r(errno_, buffer.data(), buffer.size());
#endif
                if (r)
                    buffer[buffer.size()-1] = 0;
#endif
                o << errno_s << " (" << errno_ << ')';
            }
            if (literal_) {
                if (errno_)
                    o << " - ";
                o << literal_;
            }
            what_.reset(new std::string(o.str()));
        }
        return what_->c_str();
    }
    int sys_error::code() const
    {
        return errno_;
    }
    const char* sys_error::literal() const
    {
        return literal_;
    }



    // Autogenerated by mk_boilerplate.py - begin
    Function accept_error::function() const { return Function::ACCEPT; }
    const char* accept_error::name() const { return "accept"; }
    Function bind_error::function() const { return Function::BIND; }
    const char* bind_error::name() const { return "bind"; }
    Function calloc_error::function() const { return Function::CALLOC; }
    const char* calloc_error::name() const { return "calloc"; }
    Function close_error::function() const { return Function::CLOSE; }
    const char* close_error::name() const { return "close"; }
    Function closedir_error::function() const { return Function::CLOSEDIR; }
    const char* closedir_error::name() const { return "closedir"; }
    Function dup_error::function() const { return Function::DUP; }
    const char* dup_error::name() const { return "dup"; }
    Function dup2_error::function() const { return Function::DUP2; }
    const char* dup2_error::name() const { return "dup2"; }
    Function fclose_error::function() const { return Function::FCLOSE; }
    const char* fclose_error::name() const { return "fclose"; }
    Function fcntl_error::function() const { return Function::FCNTL; }
    const char* fcntl_error::name() const { return "fcntl"; }
    Function fdopen_error::function() const { return Function::FDOPEN; }
    const char* fdopen_error::name() const { return "fdopen"; }
    Function fflush_error::function() const { return Function::FFLUSH; }
    const char* fflush_error::name() const { return "fflush"; }
    Function fileno_error::function() const { return Function::FILENO; }
    const char* fileno_error::name() const { return "fileno"; }
    Function fopen_error::function() const { return Function::FOPEN; }
    const char* fopen_error::name() const { return "fopen"; }
    Function fork_error::function() const { return Function::FORK; }
    const char* fork_error::name() const { return "fork"; }
    Function fputs_error::function() const { return Function::FPUTS; }
    const char* fputs_error::name() const { return "fputs"; }
    Function fstat_error::function() const { return Function::FSTAT; }
    const char* fstat_error::name() const { return "fstat"; }
    Function fsync_error::function() const { return Function::FSYNC; }
    const char* fsync_error::name() const { return "fsync"; }
    Function ftruncate_error::function() const { return Function::FTRUNCATE; }
    const char* ftruncate_error::name() const { return "ftruncate"; }
    Function fwrite_error::function() const { return Function::FWRITE; }
    const char* fwrite_error::name() const { return "fwrite"; }
    Function getenv_error::function() const { return Function::GETENV; }
    const char* getenv_error::name() const { return "getenv"; }
    Function gethostname_error::function() const { return Function::GETHOSTNAME; }
    const char* gethostname_error::name() const { return "gethostname"; }
    Function getline_error::function() const { return Function::GETLINE; }
    const char* getline_error::name() const { return "getline"; }
    Function gmtime_r_error::function() const { return Function::GMTIME_R; }
    const char* gmtime_r_error::name() const { return "gmtime_r"; }
    Function isatty_error::function() const { return Function::ISATTY; }
    const char* isatty_error::name() const { return "isatty"; }
    Function link_error::function() const { return Function::LINK; }
    const char* link_error::name() const { return "link"; }
    Function linkat_error::function() const { return Function::LINKAT; }
    const char* linkat_error::name() const { return "linkat"; }
    Function listen_error::function() const { return Function::LISTEN; }
    const char* listen_error::name() const { return "listen"; }
    Function lseek_error::function() const { return Function::LSEEK; }
    const char* lseek_error::name() const { return "lseek"; }
    Function lstat_error::function() const { return Function::LSTAT; }
    const char* lstat_error::name() const { return "lstat"; }
    Function malloc_error::function() const { return Function::MALLOC; }
    const char* malloc_error::name() const { return "malloc"; }
    Function mkdir_error::function() const { return Function::MKDIR; }
    const char* mkdir_error::name() const { return "mkdir"; }
    Function mkdirat_error::function() const { return Function::MKDIRAT; }
    const char* mkdirat_error::name() const { return "mkdirat"; }
    Function mkdtemp_error::function() const { return Function::MKDTEMP; }
    const char* mkdtemp_error::name() const { return "mkdtemp"; }
    Function mkstemp_error::function() const { return Function::MKSTEMP; }
    const char* mkstemp_error::name() const { return "mkstemp"; }
    Function mmap_error::function() const { return Function::MMAP; }
    const char* mmap_error::name() const { return "mmap"; }
    Function msync_error::function() const { return Function::MSYNC; }
    const char* msync_error::name() const { return "msync"; }
    Function munmap_error::function() const { return Function::MUNMAP; }
    const char* munmap_error::name() const { return "munmap"; }
    Function nanosleep_error::function() const { return Function::NANOSLEEP; }
    const char* nanosleep_error::name() const { return "nanosleep"; }
    Function open_error::function() const { return Function::OPEN; }
    const char* open_error::name() const { return "open"; }
    Function openat_error::function() const { return Function::OPENAT; }
    const char* openat_error::name() const { return "openat"; }
    Function opendir_error::function() const { return Function::OPENDIR; }
    const char* opendir_error::name() const { return "opendir"; }
    Function pipe_error::function() const { return Function::PIPE; }
    const char* pipe_error::name() const { return "pipe"; }
    Function prctl_error::function() const { return Function::PRCTL; }
    const char* prctl_error::name() const { return "prctl"; }
    Function read_error::function() const { return Function::READ; }
    const char* read_error::name() const { return "read"; }
    Function readdir_error::function() const { return Function::READDIR; }
    const char* readdir_error::name() const { return "readdir"; }
    Function readlink_error::function() const { return Function::READLINK; }
    const char* readlink_error::name() const { return "readlink"; }
    Function readlinkat_error::function() const { return Function::READLINKAT; }
    const char* readlinkat_error::name() const { return "readlinkat"; }
    Function realloc_error::function() const { return Function::REALLOC; }
    const char* realloc_error::name() const { return "realloc"; }
    Function rmdir_error::function() const { return Function::RMDIR; }
    const char* rmdir_error::name() const { return "rmdir"; }
    Function setenv_error::function() const { return Function::SETENV; }
    const char* setenv_error::name() const { return "setenv"; }
    Function setsockopt_error::function() const { return Function::SETSOCKOPT; }
    const char* setsockopt_error::name() const { return "setsockopt"; }
    Function shutdown_error::function() const { return Function::SHUTDOWN; }
    const char* shutdown_error::name() const { return "shutdown"; }
    Function sigaction_error::function() const { return Function::SIGACTION; }
    const char* sigaction_error::name() const { return "sigaction"; }
    Function socket_error::function() const { return Function::SOCKET; }
    const char* socket_error::name() const { return "socket"; }
    Function spawn_error::function() const { return Function::SPAWN; }
    const char* spawn_error::name() const { return "spawn"; }
    Function spawn_file_actions_addclose_error::function() const { return Function::SPAWN_FILE_ACTIONS_ADDCLOSE; }
    const char* spawn_file_actions_addclose_error::name() const { return "spawn_file_actions_addclose"; }
    Function spawn_file_actions_adddup2_error::function() const { return Function::SPAWN_FILE_ACTIONS_ADDDUP2; }
    const char* spawn_file_actions_adddup2_error::name() const { return "spawn_file_actions_adddup2"; }
    Function spawn_file_actions_addopen_error::function() const { return Function::SPAWN_FILE_ACTIONS_ADDOPEN; }
    const char* spawn_file_actions_addopen_error::name() const { return "spawn_file_actions_addopen"; }
    Function spawn_file_actions_destroy_error::function() const { return Function::SPAWN_FILE_ACTIONS_DESTROY; }
    const char* spawn_file_actions_destroy_error::name() const { return "spawn_file_actions_destroy"; }
    Function spawn_file_actions_init_error::function() const { return Function::SPAWN_FILE_ACTIONS_INIT; }
    const char* spawn_file_actions_init_error::name() const { return "spawn_file_actions_init"; }
    Function spawnp_error::function() const { return Function::SPAWNP; }
    const char* spawnp_error::name() const { return "spawnp"; }
    Function stat_error::function() const { return Function::STAT; }
    const char* stat_error::name() const { return "stat"; }
    Function strftime_error::function() const { return Function::STRFTIME; }
    const char* strftime_error::name() const { return "strftime"; }
    Function strtol_error::function() const { return Function::STRTOL; }
    const char* strtol_error::name() const { return "strtol"; }
    Function system_error::function() const { return Function::SYSTEM; }
    const char* system_error::name() const { return "system"; }
    Function time_error::function() const { return Function::TIME; }
    const char* time_error::name() const { return "time"; }
    Function unlink_error::function() const { return Function::UNLINK; }
    const char* unlink_error::name() const { return "unlink"; }
    Function unlinkat_error::function() const { return Function::UNLINKAT; }
    const char* unlinkat_error::name() const { return "unlinkat"; }
    Function waitid_error::function() const { return Function::WAITID; }
    const char* waitid_error::name() const { return "waitid"; }
    Function write_error::function() const { return Function::WRITE; }
    const char* write_error::name() const { return "write"; }
    // Autogenerated by mk_boilerplate.py - end

} // ixxx
